#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h> //메인 헤더파일
#include <stdlib.h> //난수 생성을 위한 헤더파일
#include <time.h> //시간값을 통한 완전난수 생성을 위한 헤더파일
#include <string.h> //구조체 형성을 위한 헤더파일
#include <stddef.h> //NULL, EOF 연산자 정의를 위한 헤더파일
#include <windows.h>

/*

※주의사항
1.구동 프로그램으로 Microsoft Visual Studio를 사용할 경우 맨 윗줄에 #define _CRT_SECURE_NO_WARNINGS 코드를 추가하여 주십시오.
2. savePlayerInfoToFile, loadPlayerInfoFromFile 함수에서 scores.txt 파일의 경로를 지정할 때 주 드라이브 바로 밑으로 지정하지 마십시오. 다른 드라이브나 SSD 등의 경로를 지정하시기 바랍니다.
    2-1.현재는 제작자의 SSD로 경로를 설정해놓은 상태입니다. 변경할 시 경로를 알맞은 드라이브로 변경하세요.

*/


struct PlayerInfo {
    char name[10000];
    int studentID;
    int score;
};

// 사용자 정보를 파일에 저장하는 함수
void savePlayerInfoToFile(struct PlayerInfo player) {
    FILE* file = fopen("D:\\player_scores.txt", "a"); // 파일 열기 (이어쓰기 모드)
    if (file != NULL) {
        fprintf(file, "%s %d %d\n", player.name, player.studentID, player.score); // 정보 파일에 저장
        fclose(file); // 파일 닫기
    }
    else printf("File open Error.\n");
}

// 사용자 정보를 파일에서 읽어오는 함수
void loadPlayerInfoFromFile(struct PlayerInfo players[], int* numPlayers) {
    FILE* file = fopen("D:\\player_scores.txt", "r"); // 파일 열기 (읽기 모드)
    if (file != NULL) {
        while (fscanf(file, "%s %d %d", players[*numPlayers].name, &players[*numPlayers].studentID, &players[*numPlayers].score) != EOF) {
            (*numPlayers)++;
        }
        fclose(file); // 파일 닫기
    }
}

// 점수를 기준으로 내림차순으로 정렬하는 함수 (버블 정렬 사용)
void sortPlayersByScore(struct PlayerInfo players[], int numPlayers) {
    for (int i = 0; i < numPlayers - 1; i++) {
        for (int j = 0; j < numPlayers - i - 1; j++) {
            if (players[j].score < players[j + 1].score) {
                // 두 플레이어 정보를 교환
                struct PlayerInfo temp = players[j];
                players[j] = players[j + 1];
                players[j + 1] = temp;
            }
        }
    }
}


//글자 출력 연출을 위한 함수
void messageOutput(char* message, int v) {
    int length = strlen(message);

    for (int i = 0; i < length; i++) {


        printf("%c", message[i]);
        Sleep(v);
    }
}


// 랭킹을 출력하는 함수
void displayRanking(struct PlayerInfo players[], int numPlayers) {
    printf("\n랭킹:\n");
    for (int i = 0; i < numPlayers; i++) {
        printf("%d. %s (학번: %d) - %d점", i + 1, players[i].name, players[i].studentID, players[i].score);
        messageOutput("\n", 100);
    }
}





int main() {
    int quizType = 0, studentID, score = 0, startOption;
    char playerName[10000] = "null";


    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    messageOutput("**********************************************************\n", 10);
    messageOutput("ver 1.9\n제작일자:20231118 \n프로그램 제작:10133 한주원\n\n---문제 출제---\n[한국사]:10133 한주원\n[영어]:10117 윤지민\n[수학, 물리학]:20431 조승현", 20);
    messageOutput("\n**********************************************************\n\n", 10);

    messageOutput("[1]퀴즈 시작하기\n", 15);
    messageOutput("[2]랭킹보기\n", 15);
    scanf("%d", &startOption);


    while (1) {
        if (startOption == 2) {

            struct PlayerInfo players[100];
            int numPlayers = 0;
            loadPlayerInfoFromFile(players, &numPlayers);


            sortPlayersByScore(players, numPlayers);


            displayRanking(players, numPlayers);
            printf("\n\n");
            messageOutput("[0]종료하기\n", 20);
            messageOutput("[1]퀴즈 시작하기\n", 20);
            int startOption_2;
            scanf("%d", &startOption_2);

            if (startOption_2 == 1) {
                messageOutput("\n퀴즈를 시작합니다!", 15);
                break;
            }
            else return 0;

        }

        if (startOption == 1) {
            messageOutput("\n퀴즈를 시작합니다!", 15);
            break;
        }
    }




    messageOutput("\n학번과 이름을 입력해주세요", 20);
    messageOutput("\n\n학번:", 15);
    scanf("%d", &studentID);
    messageOutput("이름:", 15);
    scanf("%s", &playerName);
    printf("\n");
    printf("%d", studentID);
    messageOutput(" ", 20);
    messageOutput(playerName, 20);
    messageOutput("님 환영합니다", 20);

    while (1) {

        messageOutput("\n퀴즈 부문을 선택해주세요", 20);
        messageOutput("\n\n[1]한국사\n[2]영어\n[3]수학\n[4]물리학\n", 20);
        scanf("%d", &quizType);

        if (0 < quizType <= 4) break;
        else messageOutput("잘못된 입력입니다. 1-4의 숫자를 입력하세요.", 20);

    }




    //한국사 파트


    if (quizType == 1) {
        // 문제와 답안, 선지 배열
        char* questions[] = {
            "기원전 18년경 고구려에서 내려온 유이민들이 한강 근처 위례성에 자리 잡고 세운 나라의 이름은?",
            "신라 27대 왕으로 진평왕의 뒤를 이은 신라 최초의 여왕은?",
            "불교 수용, 태학 설립, 율령 반포 등의 업적을 남겼으며 5세기 고구려의 전성기의 초석을 다진 고구려의 17대 왕은?",
            "태조의 셋째 아들로 노비안검법을 제정하고 958년 쌍기의 건의에 따라 과거제를 실시한 고려의 4대 왕은?",
            "1372년 백운화상 이선의 참뜻을 깨닫게 하려고 엮은 책으로 금속활자로 만든 세계 최초의 책은?",
            "지방의 중소 지주인 향리의 자제들로 고려 말에 등장한 새로운 정치 세력은?",
            "조선시대 궁궐로 1868년 경복궁이 다시 지어질 때까지 경복궁의 역할을 대체하여 임금이 거처하며 나라를 다스리는 정궁이 된 곳은?",
            "조선 전기 세종 때 활동하던 과학자로 우리나라 최초의 물시계인 자격루를 만들었고, 세계 최초로 측우기를 발명한 사람은?",
            "조선시대의 나라를 다스리는 기준이 된 최고의 법전은?"
        };

        int collects[] = {
            3,
            1,
            1,
            2,
            1,
            4,
            3,
            2,
            1
        };

        char* answers[][4] = {
            {"부여", "진한", "백제", "가야"},
            {"선덕여왕", "진평여왕", "진덕여왕", "진성여왕"},
            {"소수림왕", "광개토대왕", "장수왕", "개로왕"},
            {"인종", "광종", "정종", "의종"},
            {"직지심체요절", "무구정광대다라니경", "제왕운기", "신편제종교장총록"},
            {"호족", "급진개혁파", "사림", "신진사대부"},
            {"덕수궁", "창경궁", "창덕궁", "경희궁"},
            {"이산", "장영실", "홍대용", "박지원"},
            {"경국대전", "반계수록", "국조보감", "격몽요결"}
        };


        srand(time(NULL)); // 랜덤 시드 설정
        int questionOrder[9]; // 문제 순서를 저장할 배열

        // 1에서 9까지의 숫자를 무작위로 생성하여 배열에 저장
        for (int i = 0; i < 9; i++) {
            int randomNumber, exists;

            do {
                exists = 0;
                randomNumber = rand() % 9 + 1; // 1에서 9까지의 랜덤 숫자 생성

                // 생성한 숫자가 배열에 이미 존재하는지 확인
                for (int j = 0; j < i; j++) {
                    if (questionOrder[j] == randomNumber) {
                        exists = 1;
                        break;
                    }
                }
            } while (exists);

            questionOrder[i] = randomNumber; // 숫자를 배열에 저장
        }

        // 랜덤 순서로 문제를 출제
        messageOutput("\n한국사 퀴즈를 시작합니다!\n", 20);
        messageOutput("제시되는 문제에 대한 정답의 번호를 입력하시면 됩니다.\n", 20);
        messageOutput("문제는 모두 4지선다 형식으로, 1-4 이외의 번호를 입력하시면 오답 처리됩니다.\n\n", 20);
        messageOutput("준비되셨다면 퀴즈 시작을 위해 아무 키나 입력하십시오...\n", 20);

        char start;
        scanf("%s", &start);

        while (1) {

            if (start != 0) {

                system("cls");
                break;

            }

        }

        for (int i = 0; i < 9; i++) {
            int questionIndex = questionOrder[i] - 1; // 배열 인덱스를 계산
            messageOutput("\n문제 ", 20);
            printf("%d", i + 1);
            messageOutput(": ", 20);
            messageOutput(questions[questionIndex], 20);
            messageOutput("\n", 20);


            // 답안 출력

            for (int j = 0; j < 4; j++) {
                messageOutput("\n", 100);
                printf("[%d]", j + 1);
                messageOutput(answers[questionIndex][j], 20);
            }

            int correctAnswer = collects[questionIndex];//올바른 답안 출력을 위한 인덱스값 저장

            int userAnswer;
            messageOutput("\n\n답안을 선택하세요 (1-4): ", 20);
            scanf("%d", &userAnswer);

            // 사용자 답안 확인
            if (userAnswer >= 1 && userAnswer <= 4) {
                if (userAnswer == collects[questionIndex]) {
                    messageOutput("정답입니다. 1점을 획득합니다.\n", 20);
                    score += 1;
                    messageOutput("현재 점수는 ", 20);
                    printf("%d", score);
                    messageOutput("점입니다.\n\n", 20);

                }
                else {

                    messageOutput("오답입니다. 정답은 ", 20);
                    //printf("[%d] %s", collects[questionIndex], answers[questionIndex][correctAnswer - 1]);
                    printf("[%d] ", collects[questionIndex]);
                    messageOutput(answers[questionIndex][correctAnswer - 1], 20);
                    messageOutput(" 입니다.", 20);

                    messageOutput("점수 획득에 실패합니다.\n", 20);

                    messageOutput("현재 점수는 ", 20);
                    printf("%d", score);
                    messageOutput("점입니다.\n\n", 20);

                }
            }
            else {
                messageOutput("잘못된 입력입니다. 1부터 4까지의 숫자를 선택하세요.\n", 20);

                messageOutput("정답은 ", 20);
                printf("[%d] ", collects[questionIndex]);
                messageOutput(answers[questionIndex][correctAnswer - 1], 20);
                messageOutput(" 입니다.", 20);

                messageOutput("현재 점수는 ", 20);
                printf("%d", score);
                messageOutput("점입니다.\n\n", 20);
            }
        }

        /*printf("퀴즈가 종료되었습니다.\n");
        printf("%d %s 님의 점수는 %d점입니다.\n", studentID, playerName, score);*/
        messageOutput("퀴즈가 종료되었습니다.\n", 20);
        printf("%d ", studentID);
        messageOutput(playerName, 20);
        messageOutput("님의 점수는 ", 20);
        printf("%d", score);
        messageOutput(" 점입니다.\n", 20);



    }





    //영어퀴즈 파트




    if (quizType == 2) {
        // 문제와 답안, 선지 배열
        char* questions[] = {
            "pride",
            "salutary",
            "pneumoconiosis",
            "mourning",
            "nerve",
            "mandate",
            "banish",
            "substantive",
            "corollary"
        };

        int collects[] = {
            2,
            4,
            1,
            3,
            1,
            2,
            2,
            4,
            1
        };

        char* answers[][4] = {
            {"놀라움", "자부심", "부러워하다", "용감"},
            {"짠", "채소", "입력", "유익한"},
            {"진폐증", "폐렴", "뇌졸증", "자폐증"},
            {"노래를 부르다", "시간", "슬픔", "아침"},
            {"활기", "강인함", "뇌", "오류"},
            {"매너", "명령", "후보자", "책임을 지다"},
            {"개조하다", "추방하다", "오류", "갑자기"},
            {"구독자", "기분이 좋은", "섬세한", "실재하는"},
            {"결과", "자석", "화려한", "식민지"}
        };


        srand(time(NULL)); // 랜덤 시드 설정
        int questionOrder[9]; // 문제 순서를 저장할 배열

        // 1에서 9까지의 숫자를 무작위로 생성하여 배열에 저장
        for (int i = 0; i < 9; i++) {
            int randomNumber, exists;

            do {
                exists = 0;
                randomNumber = rand() % 9 + 1; // 1에서 9까지의 랜덤 숫자 생성

                // 생성한 숫자가 배열에 이미 존재하는지 확인
                for (int j = 0; j < i; j++) {
                    if (questionOrder[j] == randomNumber) {
                        exists = 1;
                        break;
                    }
                }
            } while (exists);

            questionOrder[i] = randomNumber; // 숫자를 배열에 저장
        }

        // 랜덤 순서로 문제를 출제
        messageOutput("\n영어퀴즈를 시작합니다!\n", 20);
        messageOutput("제시되는 영어단어의 뜻으로 알맞은 답안의 번호를 입력하시면 됩니다.\n", 20);
        messageOutput("문제는 모두 4지선다 형식으로, 1-4 이외의 번호를 입력하시면 오답 처리됩니다.\n\n", 20);
        messageOutput("준비되셨다면 퀴즈 시작을 위해 아무 키나 입력하십시오...\n", 15);

        char start;
        scanf("%s", &start);

        while (1) {

            if (start != 0) {

                system("cls");
                break;

            }

        }

        for (int i = 0; i < 9; i++) {
            int questionIndex = questionOrder[i] - 1; // 배열 인덱스를 계산
            messageOutput("\n문제 ", 20);
            printf("%d", i + 1);
            messageOutput(": ", 20);
            messageOutput(questions[questionIndex], 20);
            messageOutput("\n", 20);


            // 답안 출력

            for (int j = 0; j < 4; j++) {
                messageOutput("\n", 100);
                printf("[%d]", j + 1);
                messageOutput(answers[questionIndex][j], 20);
            }

            int correctAnswer = collects[questionIndex];//올바른 답안 출력을 위한 인덱스값 저장

            int userAnswer;
            messageOutput("\n\n답안을 선택하세요 (1-4): ", 20);
            scanf("%d", &userAnswer);

            // 사용자 답안 확인
            if (userAnswer >= 1 && userAnswer <= 4) {
                if (userAnswer == collects[questionIndex]) {
                    messageOutput("정답입니다. 1점을 획득합니다.\n", 20);
                    score += 1;
                    messageOutput("현재 점수는 ", 20);
                    printf("%d", score);
                    messageOutput("점입니다.\n\n", 20);

                }
                else {

                    messageOutput("오답입니다. 정답은 ", 20);
                    //printf("[%d] %s", collects[questionIndex], answers[questionIndex][correctAnswer - 1]);
                    printf("[%d] ", collects[questionIndex]);
                    messageOutput(answers[questionIndex][correctAnswer - 1], 20);
                    messageOutput(" 입니다.", 20);

                    messageOutput("점수 획득에 실패합니다.\n", 20);

                    messageOutput("현재 점수는 ", 20);
                    printf("%d", score);
                    messageOutput("점입니다.\n\n", 20);

                }
            }
            else {
                messageOutput("잘못된 입력입니다. 1부터 4까지의 숫자를 선택하세요.\n", 20);

                messageOutput("정답은 ", 20);
                printf("[%d] ", collects[questionIndex]);
                messageOutput(answers[questionIndex][correctAnswer - 1], 20);
                messageOutput(" 입니다.", 20);

                messageOutput("현재 점수는 ", 20);
                printf("%d", score);
                messageOutput("점입니다.\n\n", 20);
            }
        }

        /*printf("퀴즈가 종료되었습니다.\n");
        printf("%d %s 님의 점수는 %d점입니다.\n", studentID, playerName, score);*/
        messageOutput("퀴즈가 종료되었습니다.\n", 20);
        printf("%d ", studentID);
        messageOutput(playerName, 20);
        messageOutput("님의 점수는 ", 20);
        printf("%d", score);
        messageOutput(" 점입니다.\n", 20);



    }




    //수학퀴즈 파트





    if (quizType == 3) {
        // 문제와 답안, 선지 배열
        char* questions[] = {
            "3x + 5 = 2x - 7, x = ?",
            "x² - 4x + 4 = 0, x³ = ?",
            "2x + 5 < 13, x의 범위는?",
            "3a - 2b = 7, 2a + 4b = 10, a * b = ?",
            "3³ * 4² / 2³ * 5² = ?",
            "x² - y² = 21 / x - y = 3일 때, x³ + 2xy - y⁴의 값은?",
            "10명의 사람들 중 4명을 뽑을 때, 가능한 경우의 수를 고르시오.",
            "(3,4)와 (-1,2)를 지나는 직선이 ax + by = 5일때, a + a³ - 7ab를 구하시오.",
            "log20 + log5 = ?"
        };

        int collects[] = {
            2,
            1,
            1,
            1,
            4,
            2,
            4,
            3,
            2
        };

        char* answers[][4] = {
            {"-10", "-12", "-15", "-19"},
            {"8", "27", "64", "125"},
            {"x < 4", "x > 4", "x < 3", "x < 2"},
            {"3", "6", "8", "10"},
            {"1075", "1150", "1200", "1350"},
            {"113", "129", "137", "153"},
            {"120", "150", "180", "210"},
            {"8", "10", "12", "14"},
            {"0", "2", "4", "5"}
        };


        srand(time(NULL)); // 랜덤 시드 설정
        int questionOrder[9]; // 문제 순서를 저장할 배열

        // 1에서 9까지의 숫자를 무작위로 생성하여 배열에 저장
        for (int i = 0; i < 9; i++) {
            int randomNumber, exists;

            do {
                exists = 0;
                randomNumber = rand() % 9 + 1; // 1에서 9까지의 랜덤 숫자 생성

                // 생성한 숫자가 배열에 이미 존재하는지 확인
                for (int j = 0; j < i; j++) {
                    if (questionOrder[j] == randomNumber) {
                        exists = 1;
                        break;
                    }
                }
            } while (exists);

            questionOrder[i] = randomNumber; // 숫자를 배열에 저장
        }

        // 랜덤 순서로 문제를 출제
        messageOutput("\n수학퀴즈를 시작합니다!\n", 15);
        messageOutput("문제에서 등장하는 수학 기호 중 *은 곱하기, /은 나누기로 이해하시면 됩니다..\n", 15);
        messageOutput("문제는 모두 4지선다 형식으로, 1-4 이외의 번호를 입력하시면 오답 처리됩니다.\n\n", 15);
        messageOutput("준비되셨다면 퀴즈 시작을 위해 아무 키나 입력하십시오...\n", 15);

        char start;
        scanf("%s", &start);

        while (1) {

            if (start != 0) {

                system("cls");
                break;

            }

        }

        for (int i = 0; i < 9; i++) {
            int questionIndex = questionOrder[i] - 1; // 배열 인덱스를 계산
            messageOutput("\n문제 ", 20);
            printf("%d", i + 1);
            messageOutput(": ", 20);
            messageOutput(questions[questionIndex], 20);
            messageOutput("\n", 20);


            // 답안 출력

            for (int j = 0; j < 4; j++) {
                messageOutput("\n", 100);
                printf("[%d]", j + 1);
                messageOutput(answers[questionIndex][j], 20);
            }

            int correctAnswer = collects[questionIndex];//올바른 답안 출력을 위한 인덱스값 저장

            int userAnswer;
            messageOutput("\n\n답안을 선택하세요 (1-4): ", 20);
            scanf("%d", &userAnswer);

            // 사용자 답안 확인
            if (userAnswer >= 1 && userAnswer <= 4) {
                if (userAnswer == collects[questionIndex]) {
                    messageOutput("정답입니다. 1점을 획득합니다.\n", 20);
                    score += 1;
                    messageOutput("현재 점수는 ", 20);
                    printf("%d", score);
                    messageOutput("점입니다.\n\n", 20);

                }
                else {

                    messageOutput("오답입니다. 정답은 ", 20);
                    //printf("[%d] %s", collects[questionIndex], answers[questionIndex][correctAnswer - 1]);
                    printf("[%d] ", collects[questionIndex]);
                    messageOutput(answers[questionIndex][correctAnswer - 1], 20);
                    messageOutput(" 입니다.", 20);

                    messageOutput("점수 획득에 실패합니다.\n", 20);

                    messageOutput("현재 점수는 ", 20);
                    printf("%d", score);
                    messageOutput("점입니다.\n\n", 20);

                }
            }
            else {
                messageOutput("잘못된 입력입니다. 1부터 4까지의 숫자를 선택하세요.\n", 20);

                messageOutput("정답은 ", 20);
                printf("[%d] ", collects[questionIndex]);
                messageOutput(answers[questionIndex][correctAnswer - 1], 20);
                messageOutput(" 입니다.", 20);

                messageOutput("현재 점수는 ", 20);
                printf("%d", score);
                messageOutput("점입니다.\n\n", 20);
            }
        }

        /*printf("퀴즈가 종료되었습니다.\n");
        printf("%d %s 님의 점수는 %d점입니다.\n", studentID, playerName, score);*/
        messageOutput("퀴즈가 종료되었습니다.\n", 20);
        printf("%d ", studentID);
        messageOutput(playerName, 20);
        messageOutput("님의 점수는 ", 20);
        printf("%d", score);
        messageOutput("점입니다.\n", 20);



    }





    //물리학퀴즈 파트 





    if (quizType == 4) {
        // 문제와 답안, 선지 배열
        char* questions[] = {
            "움직이고 있는 물체가 일직선으로 등가속도 운동을 하고 있다.\n이 물체의 처음 측정 속도가 4m/s, 마지막 측정 속도가 8m/s이였으며, 이 기간동안 8m만큼 움직였을 때, \n이 물체의 가속도는?",
            "지면 위에 무게가 6kg인 물체가 있으며, 그 위에 무게가 8kg인 물체가 있다.\n아래에 있는 물체가 지면에 의해 받는 수직항력은?\n(중력가속도는 10m\s²이다.)",
            "물체가 받는 충격력의 크기를 줄이는 일상생활의 예시로 옳지 않은 것은?",
            "용수철 상수가 20N/m인 용수철에 31kg인 물체가 2m/s의 속도로 움직이고 있으며, \n이때 용수철의 길이가 처음보다 7m 늘어난 상태일 때, 물체가 갖는 역학적 에너지의 총합을 구하시오.",
            "열역학 과정 중 부피가 일정한 과정을 무엇이라 하는가?",
            "두 점전하가 존재하며, 각각의 점전하의 크기가 각각 +q, +2q이고 이들이 떨어진 거리가 3r일때,\n두 점전하 사이에 작용하는 힘의 크기를 F라 하자. \n두 점전하가 2r만큼 떨어져 있고, 각각의 점전하의 크기는 -6q, +8q일때,\n이 두 점전하에 작용하는 힘의 크기를 구하시오.",
            "다음 중 반도체에 해당하는 것은?",
            "원형 코일 위에서 S극을 아래로 하여 자석에 가까이 하였다.\n이때 코일의 위쪽에 유도되는 극의 종류와 전류의 방향을 알맞게 고른 선지를 고르시오.",
            "다음 중 '매질의 한 점이 1회 진동하는 데 걸리는 시간'을 무엇이라 하는가?"
        };

        int collects[] = {
            2,
            1,
            1,
            1,
            4,
            2,
            4,
            3,
            2
        };

        char* answers[][4] = {
            {"1m/s²", "2m/s²", "3m/s²", "4m/s²"},
            {"60N", "80N", "120N", "140N"},
            {"에어백", "헬멧", "대포의 포신", "야구 글러브"},
            {"468J", "494J", "521J", "552J"},
            {"등적과정", "등압과정", "등온과정", "단열과정"},
            {"48F", "54F", "72F", "108F"},
            {"금", "Ge", "고무", "Al"},
            {"N극, 시계방향", "N극, 반시계방향", "S극, 시계방향", "S극, 반시계방향"},
            {"주기", "위상", "헤르츠(Hz)", "진폭"}
        };


        srand(time(NULL)); // 랜덤 시드 설정
        int questionOrder[9]; // 문제 순서를 저장할 배열

        // 1에서 9까지의 숫자를 무작위로 생성하여 배열에 저장
        for (int i = 0; i < 9; i++) {
            int randomNumber, exists;

            do {
                exists = 0;
                randomNumber = rand() % 9 + 1; // 1에서 9까지의 랜덤 숫자 생성

                // 생성한 숫자가 배열에 이미 존재하는지 확인
                for (int j = 0; j < i; j++) {
                    if (questionOrder[j] == randomNumber) {
                        exists = 1;
                        break;
                    }
                }
            } while (exists);

            questionOrder[i] = randomNumber; // 숫자를 배열에 저장
        }

        // 랜덤 순서로 문제를 출제
        messageOutput("\n물리퀴즈를 시작합니다!\n", 20);
        messageOutput("제시되는 문제를 풀고 알맞은 답안의 번호를 입력하시면 됩니다.\n", 15);
        messageOutput("이 문제에 나오는 모든 문제들은 물리1에 나오는 내용이니, 풀기 직전 본인이 물리1 선택자인지 확인해주시길 바랍니다.\n", 15);
        messageOutput("문제는 모두 4지선다 형식으로, 1-4 이외의 번호를 입력하시면 오답 처리됩니다.\n\n", 15);
        messageOutput("준비되셨다면 퀴즈 시작을 위해 아무 키나 입력하십시오...\n", 15);

        char start;
        scanf("%s", &start);

        while (1) {

            if (start != 0) {

                system("cls");
                break;

            }

        }

        for (int i = 0; i < 9; i++) {
            int questionIndex = questionOrder[i] - 1; // 배열 인덱스를 계산
            messageOutput("\n문제 ", 20);
            printf("%d", i + 1);
            messageOutput(": ", 20);
            messageOutput(questions[questionIndex], 20);
            messageOutput("\n", 20);


            // 답안 출력

            for (int j = 0; j < 4; j++) {
                messageOutput("\n", 100);
                printf("[%d]", j + 1);
                messageOutput(answers[questionIndex][j], 20);
            }

            int correctAnswer = collects[questionIndex];//올바른 답안 출력을 위한 인덱스값 저장

            int userAnswer;
            messageOutput("\n\n답안을 선택하세요 (1-4): ", 20);
            scanf("%d", &userAnswer);

            // 사용자 답안 확인
            if (userAnswer >= 1 && userAnswer <= 4) {
                if (userAnswer == collects[questionIndex]) {
                    messageOutput("정답입니다. 1점을 획득합니다.\n", 20);
                    score += 1;
                    messageOutput("현재 점수는 ", 20);
                    printf("%d", score);
                    messageOutput("점입니다.\n\n", 20);

                }
                else {

                    messageOutput("오답입니다. 정답은 ", 20);
                    //printf("[%d] %s", collects[questionIndex], answers[questionIndex][correctAnswer - 1]);
                    printf("[%d] ", collects[questionIndex]);
                    messageOutput(answers[questionIndex][correctAnswer - 1], 20);
                    messageOutput(" 입니다.", 20);

                    messageOutput("점수 획득에 실패합니다.\n", 20);

                    messageOutput("현재 점수는 ", 20);
                    printf("%d", score);
                    messageOutput("점입니다.\n\n", 20);

                }
            }
            else {
                messageOutput("잘못된 입력입니다. 1부터 4까지의 숫자를 선택하세요.\n", 20);

                messageOutput("정답은 ", 20);
                printf("[%d] ", collects[questionIndex]);
                messageOutput(answers[questionIndex][correctAnswer - 1], 20);
                messageOutput(" 입니다.", 20);

                messageOutput("현재 점수는 ", 20);
                printf("%d", score);
                messageOutput("점입니다.\n\n", 20);
            }
        }

        /*printf("퀴즈가 종료되었습니다.\n");
        printf("%d %s 님의 점수는 %d점입니다.\n", studentID, playerName, score);*/
        messageOutput("퀴즈가 종료되었습니다.\n", 20);
        printf("%d ", studentID);
        messageOutput(playerName, 20);
        messageOutput("님의 점수는 ", 20);
        printf("%d", score);
        messageOutput("점입니다.\n", 20);



    }



    //여기에 다른 부문 삽입

    messageOutput("\n수고하셨습니다. 랭킹을 출력하시겠습니까?\n\n", 20);
    int rankingOutput;
    messageOutput("[1]Y\n[2]N\n", 20);
    scanf("%d", &rankingOutput);

    struct PlayerInfo player;
    strcpy(player.name, playerName);
    player.studentID = studentID;
    player.score = score;
    savePlayerInfoToFile(player);

    if (rankingOutput == 1) {


        // 파일에서 플레이어 정보 읽어오기
        struct PlayerInfo players[100];
        int numPlayers = 0;
        loadPlayerInfoFromFile(players, &numPlayers);

        // 랭킹을 점수 순으로 정렬
        sortPlayersByScore(players, numPlayers);

        // 랭킹 표시
        displayRanking(players, numPlayers);


        messageOutput("\n랭킹 출력이 완료되었습니다. 퀴즈를 종료합니다.\n\n", 30);
    }

    else messageOutput("\n퀴즈를 종료합니다.\n\n", 20);

    return 0;


}//main 닫히는곳
